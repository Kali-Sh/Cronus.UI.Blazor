@page "/eventstore"
@inject AppState App
@inject CronusClient Cronus

<div class="pin">
    <input type="text" bind="@aggregateId" style="width:1000px" />
    <IconButton Icon="magnifying-glass" Click="@(async ()=> await GetAggregateAsync())"></IconButton>
</div>

<div class="row">
    <div class="col-lg-3">
        @foreach (var commit in commits)
        {
            <ul class="list-group list-group-flush">
                @foreach (var evnt in commit.Events)
                {
                    <li class="list-group-item cursor-pointer" onclick="@(async ()=> await GetDetails(evnt))">
                        <div class="row">
                            <div class="col-lg-5">
                                <span style="font-size:smaller;">@commit.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</span>
                            </div>
                            <div class="col-lg-7">
                                <span class="ml-4" style="color:forestgreen">
                                    <Icon Identifier="bookmark" />
                                </span>
                                @evnt?.EventName
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
    <div class="col-lg-9">
        <div class="json-box">
            <pre>
                @details
            </pre>
        </div>
    </div>
</div>

@functions{
    string aggregateId = "dXJuOnBydXZpdDpwcm9qZWN0aW9ubWFuYWdlcjphZDc1NWQ3OC00ZWNiLTQ5MzAtODM3ZS0xNjBlZmZiZmVlMTQ=";
    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();
    string details = string.Empty;

    async Task GetAggregateAsync()
    {
        AggregateDto ar = await Cronus.GetAggregate(App.Connection, aggregateId);
        if (ar is null == false && ar.Commits is null == false)
        {
            commits = ar.Commits.OrderByDescending(commit => commit.AggregateRootRevision).ToList();
            StateHasChanged();
        }
    }

    async Task GetDetails(EventDto eventDto)
    {
        details = await JSRuntime.Current.InvokeAsync<string>("JSON.stringify", eventDto.EventData, null, 4);

        StateHasChanged();
    }

}
