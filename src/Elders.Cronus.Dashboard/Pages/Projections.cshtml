@inject CronusClient Cronus

<button type="button" class="btn btn-primary" onclick="@(async ()=> await GetProjectionsList())">Refresh</button>

<div class="legend">
    <span class="badge badge-success">Live</span>
    <span class="badge badge-primary">Building</span>
    <span class="badge badge-secondary">NotPresent</span>
    <span class="badge badge-danger">Timedout</span>
    <span class="badge badge-dark">Canceled</span>
</div>

<div class="row">
    @foreach (var projection in projections)
    {
        <ProjectionCard Projection="@projection" Connection="@Connection"></ProjectionCard>
    }
</div>

@functions{

    [Parameter]
    protected Connection Connection { get; set; }

    List<Projection> projections = new List<Projection>();


    protected async Task GetProjectionsList()
    {
        var result = await Cronus.GetProjectionsAsync(Connection);

        projections = result.Result.Projections;
    }

}
