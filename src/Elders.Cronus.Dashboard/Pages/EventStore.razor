@page "/eventstore"
@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime
@inject ILogger<EventStore> Log

<div class="pin">
    <MudGrid>
        <MudItem xs="11">
            <MudAutocomplete T="string" Label="Aggregate ID" @bind-Text=@AggregateId SearchFunc=@FilterSampleAsync
                             CoerceValue=false
                             CoerceText=false
                             Strict=false
                             AdornmentIcon=@Icons.Material.Filled.Search
                             SelectOnClick=false
                             AutoFocus=true
                             TextUpdateSuppression=false
                             OnAdornmentClick=@(async ()=> await GetAggregateAsync())
                             OnKeyUp=@(async (args)=> await OnKeyPressAsync(args))></MudAutocomplete>
        </MudItem>
    </MudGrid>
</div>

<MudExpansionPanels Elevation="3">
    @foreach (var commit in commits)
    {
        <MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <h5 class="mat-subtitle1">Commit revision @commit.AggregateRootRevision - @commit.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</h5>
                </TitleContent>
                <ChildContent>
                    <MudExpansionPanels>
                        @foreach (var theEvent in commit.Events)
                        {
                            @if (@theEvent.IsEntityEvent)
                            {
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <span style="color:aqua;">
                                            @theEvent.EventPosition
                                            <MudIcon Icon="@Icons.Material.Filled.Bookmark" />
                                            @theEvent?.EventName
                                        </span>
                                    </TitleContent>
                                    <ChildContent>
                                        <RepublishEvent AggregateId="@AggregateId" Event="@theEvent" AggregateCommit="commit"></RepublishEvent>
                                        <div class="json-box">
                                            <pre Style="@($"color:{Colors.LightGreen.Accent3};")">@theEvent.EventData</pre>
                                        </div>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                            else if (@theEvent.IsPublicEvent)
                            {
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <span style="color:royalblue;">
                                            @theEvent.EventPosition
                                            <MudIcon Icon="@Icons.Material.Filled.Bookmark" />
                                            @theEvent?.EventName
                                        </span>
                                    </TitleContent>
                                    <ChildContent>
                                        <RepublishEvent AggregateId="@AggregateId" Event="@theEvent" AggregateCommit="commit"></RepublishEvent>
                                        <div class="json-box">
                                            <pre Style="@($"color:{Colors.LightGreen.Accent3};")">@theEvent.EventData</pre>
                                        </div>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                            else
                            {
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <span style="color:forestgreen;">
                                            @theEvent.EventPosition
                                            <MudIcon Icon="@Icons.Material.Filled.Bookmark" />
                                            @theEvent?.EventName
                                        </span>
                                    </TitleContent>
                                    <ChildContent>
                                        <RepublishEvent AggregateId="@AggregateId" Event="@theEvent" AggregateCommit="commit"></RepublishEvent>
                                        <div class="json-box">
                                            <pre Style="@($"color:{Colors.LightGreen.Accent3};")">@theEvent.EventData</pre>
                                        </div>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                        }
                    </MudExpansionPanels>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
</MudExpansionPanels>


@code {
    string AggregateId { get; set; }

    IEnumerable<string> AggregateRootIdSamples { get; set; }

    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();

    string details = string.Empty;

    async Task GetAggregateAsync()
    {
        AggregateDto ar = await Cronus.GetAggregate(App.Connection, AggregateId);
        if (ar is null == false && ar.Commits is null == false)
        {
            foreach (var commit in ar.Commits)
            {
                foreach (var evnt in commit.Events)
                {
                    evnt.EventData = await FormatJsonAsync(evnt.EventData);
                }
                commit.Events = commit.Events.OrderByDescending(e => e.EventPosition).ToList();
            }

            commits = ar.Commits.OrderByDescending(commit => commit.AggregateRootRevision).ToList();

            StateHasChanged();
        }
        else
        {
            commits.Clear();
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAggregateRootIdSamplesAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task GetAggregateRootIdSamplesAsync()
    {
        var samples = await Cronus.GetAggregateRootIdSamples(App.Connection);
        AggregateRootIdSamples = samples;
    }

    private async Task<IEnumerable<string>> FilterSampleAsync(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return new string[0];
        return AggregateRootIdSamples.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task OnKeyPressAsync(KeyboardEventArgs args)
    {
        if (args.Code == "Enter" || args.Code == "NumpadEnter")
        {
            await GetAggregateAsync();
        }
    }

    public async Task<string> FormatJsonAsync(object data)
    {
        return await JSRuntime.InvokeAsync<string>("JSON.stringify", data, null, 4);
    }


}
