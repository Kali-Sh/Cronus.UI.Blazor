@page "/eventstore"
@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime
@inject ILogger<EventStore> Log

<div class="pin">
    <MudGrid>
        <MudItem xs="11">
            <MudAutocomplete T="string" Value="@theValue" Label="Aggregate ID" @bind-Text=@AggregateId SearchFunc=@FilterSampleAsync
                             CoerceValue=false
                             CoerceText=false
                             Strict=false
                             AdornmentIcon=@Icons.Material.Filled.Search
                             SelectOnClick=false
                             AutoFocus=true
                             OnAdornmentClick=@(async ()=> await GetAggregateAsync())
                             OnKeyUp=@(async (args)=> await OnKeyPressAsync(args))></MudAutocomplete>
        </MudItem>
    </MudGrid>
</div>

<MudGrid >
    <MudItem xs="5">
        <MudPaper Outlined=true Style="max-height: 80vh;overflow: auto;">
                <MudTable Items="@commits" FixedHeader=true Dense=true>
                    <ColGroup>
                        <col style="width:200px;"  />
                        <col style="width:70px;" />
                        <col  />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Timestamp</MudTh>
                        <MudTh>Rev</MudTh>
                        <MudTh>Events</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Timestamp">
                            <MudList Clickable="true" Dense=true>
                                <MudListItem Text="@context.Timestamp.ToString("MMM d'th' yyyy")" />
                                <MudListItem Text="@context.Timestamp.ToString("hh:mm:ss.fff")" />
                            </MudList>            
                        </MudTd>
                        <MudTd DataLabel="Rev">@context.AggregateRootRevision</MudTd>
                        <MudTd DataLabel="Events">
                            <MudList Clickable="true" Dense=true>
                                @foreach (var theEvent in @context.Events)
                                {
                                    @if (@theEvent.IsEntityEvent)
                                    {
                                    <MudListItem style="color:orange;" Text="@theEvent.EventName" Icon="@Icons.Material.Filled.Event" OnClick=@(async ()=> SelectedEvent = @theEvent) />
                                    }
                                    else if (@theEvent.IsPublicEvent)
                                    {
                                    <MudListItem style="color:royalblue;" Text="@theEvent.EventName" Icon="@Icons.Material.Filled.Public" OnClick=@(async ()=> SelectedEvent = @theEvent) />
                                    }
                                    else
                                    {
                                    <MudListItem style="color:forestgreen;" Text="@theEvent.EventName" Icon="@Icons.Material.Filled.Event" OnClick=@(async ()=> SelectedEvent = @theEvent) />
                                    }
                                }
                            </MudList>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

        </MudPaper>
    </MudItem>
    <MudItem xs="7">
        <MudPaper Outlined=true Style="max-height: 80vh;overflow: auto;">
            <MudText Typo="Typo.caption">@SelectedEvent.Timestamp.ToString("MMM d'th' yyyy hh:mm:ss.fff")</MudText>
            <MudText Typo="Typo.h6">@SelectedEvent.EventName - @SelectedEvent.Id</MudText>
            <div class="json-box">
                <pre Style="@($"color:{Colors.LightGreen.Accent3}")">@SelectedEvent.EventData</pre>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    string AggregateId { get; set; }
    string theValue { get; set; } = "urn:pruvit:inventory:profile:675";
    IEnumerable<string> AggregateRootIdSamples { get; set; }
    EventDto SelectedEvent { get; set; }
    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();

    string details = string.Empty;

    async Task GetAggregateAsync()
    {
        commits.Clear();
        SelectedEvent = null;
        StateHasChanged();

        AggregateDto ar = await Cronus.GetAggregate(App.Connection, AggregateId);
        if (ar is null == false && ar.Commits is null == false)
        {
            foreach (var commit in ar.Commits)
            {
                foreach (var evnt in commit.Events)
                {
                    evnt.EventData = await FormatJsonAsync(evnt.EventData);
                }
                commit.Events = commit.Events.OrderByDescending(e => e.EventPosition).ToList();
            }

            commits = ar.Commits.OrderByDescending(commit => commit.AggregateRootRevision).ToList();

            StateHasChanged();
        }
        else
        {
            commits.Clear();
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAggregateRootIdSamplesAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task GetAggregateRootIdSamplesAsync()
    {
        var samples = await Cronus.GetAggregateRootIdSamples(App.Connection);
        AggregateRootIdSamples = samples;
    }

    private async Task<IEnumerable<string>> FilterSampleAsync(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return new string[0];
        return AggregateRootIdSamples.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public async Task OnKeyPressAsync(KeyboardEventArgs args)
    {
        if (args.Code == "Enter" || args.Code == "NumpadEnter")
        {
            await GetAggregateAsync();
        }
    }

    public async Task<string> FormatJsonAsync(object data)
    {
        return await JSRuntime.InvokeAsync<string>("JSON.stringify", data, null, 4);
    }
}
