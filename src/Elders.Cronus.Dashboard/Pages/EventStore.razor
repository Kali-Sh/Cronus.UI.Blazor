@page "/domain"
@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime



    

<div class="mat-layout-grid">
    <h1>Aggregates</h1>

    <MatTable Items="@Aggregates" LoadInitialData="true" Striped="false" AllowSelection="true" SelectionChanged="AggregateSelectionChangedEvent" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Name</th>
            <th>Description</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
            <td>@String.Format("${0:f2}", @context.Name)</td>
        </MatTableRow>
    </MatTable>
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <h2>Commands</h2>

            <MatTable Items="@AggregateCommands" LoadInitialData="true" Striped="false" AllowSelection="true" class="mat-elevation-z5">
                <MatTableHeader>
                    <th>Name</th>
                    <th>Description</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Name</td>
                    <td>@String.Format("${0:f2}", @context.Name)</td>
                </MatTableRow>
            </MatTable>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <h2>Events</h2>

            <MatTable Items="@AggregateEvents" LoadInitialData="true" Striped="false" AllowSelection="true" class="mat-elevation-z5">
                <MatTableHeader>
                    <th>Name</th>
                    <th>Description</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Name</td>
                    <td>@String.Format("${0:f2}", @context.Name)</td>
                </MatTableRow>
            </MatTable>
        </div>
    </div>
</div>

    @code {
        DomainAggregateDto[] Aggregates { get; set; }

        DomainEventDto[] AggregateEvents { get; set; }

        DomainCommandDto[] AggregateCommands { get; set; }

        protected override async Task OnInitializedAsync()
        {
            var result = await Cronus.GetDomainAsync(@App.Connection);
            Aggregates = result.Aggregates.ToArray();
        }

        public void AggregateSelectionChangedEvent(object row)
        {
            if (row == null)
            {
                AggregateCommands = new List<DomainCommandDto>().ToArray();
                AggregateEvents = new List<DomainEventDto>().ToArray();
            }
            else
            {
                AggregateCommands = ((DomainAggregateDto)row).Commands.ToArray();
                AggregateEvents = ((DomainAggregateDto)row).Events.ToArray();
            }

            this.StateHasChanged();
        }
    }
