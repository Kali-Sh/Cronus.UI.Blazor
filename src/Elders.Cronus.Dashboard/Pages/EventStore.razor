@page "/eventstore"
@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime
@inject ILogger<EventStore> Log

<div class="pin">
    <MatTextField @bind-Value="@AggregateId" Label="Aggregate ID" style="width:1000px"></MatTextField>
    <MatIconButton Icon="search" OnClick="@(async ()=> await GetAggregateAsync())"></MatIconButton>
</div>

<div class="mat-layout-grid">

    <MatAccordion Multi="true">
        @foreach (var commit in commits)
        {
            <MatAccordion Multi="true">
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>
                            <h3 class="mat-subtitle1">Commit revision @commit.AggregateRootRevision - @commit.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</h3>
                        </MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        @foreach (var theEvent in commit.Events)
                        {
                            <MatExpansionPanel>
                                <MatExpansionPanelSummary>
                                    <MatExpansionPanelHeader>
                                        @if (@theEvent.IsEntityEvent)
                                        {
                                            <span style="color:maroon">
                                                @theEvent.EventPosition
                                                <Icon Identifier="bookmark" />
                                                @theEvent?.EventName
                                            </span>
                                        }
                                        else if (@theEvent.IsPublicEvent)
                                        {
                                            <span style="color:royalblue">
                                                @theEvent.EventPosition
                                                <Icon Identifier="bookmark" />
                                                @theEvent?.EventName
                                            </span>
                                        }
                                        else
                                        {
                                            <span style="color:forestgreen">
                                                @theEvent.EventPosition
                                                <Icon Identifier="bookmark" />
                                                @theEvent?.EventName
                                            </span>
                                        }
                                    </MatExpansionPanelHeader>
                                </MatExpansionPanelSummary>
                                <MatExpansionPanelDetails>
                                    <RepublishEvent AggregateId="@AggregateId" Event="@theEvent" AggregateCommit="commit"></RepublishEvent>
                                    <div class="json-box">
                                        <pre>@theEvent.EventData</pre>
                                    </div>
                                </MatExpansionPanelDetails>
                            </MatExpansionPanel>
                        }
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>
        }
    </MatAccordion>
</div>


@code {

    string AggregateId { get; set; }

    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();
    string details = string.Empty;

    async Task GetAggregateAsync()
    {
        AggregateDto ar = await Cronus.GetAggregate(App.Connection, AggregateId);
        if (ar is null == false && ar.Commits is null == false)
        {
            foreach (var commit in ar.Commits)
            {
                foreach (var evnt in commit.Events)
                {
                    evnt.EventData = await FormatJsonAsync(evnt.EventData);
                }
                commit.Events = commit.Events.OrderByDescending(e => e.EventPosition).ToList();
            }

            commits = ar.Commits.OrderByDescending(commit => commit.AggregateRootRevision).ToList();

            StateHasChanged();
        }
    }

    public async Task<string> FormatJsonAsync(object data)
    {
        return await JSRuntime.InvokeAsync<string>("JSON.stringify", data, null, 4);
    }
}
