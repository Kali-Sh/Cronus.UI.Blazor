@page "/eventstore"
@using Elders.Cronus.Dashboard.Services;
@using Microsoft.Extensions.Caching.Memory;
@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime
@inject ILogger<EventStore> Log
@inject CacheService MemoryCache

<MudGrid>
    <MudItem xs="11">
        <MudAutocomplete T="string" Label="Aggregate ID" @bind-Text=@AggregateId SearchFunc=@FilterSampleAsync
                         CoerceValue=false
                         CoerceText=false
                         Strict=false
                         AdornmentIcon=@Icons.Material.Filled.Search
                         SelectOnClick=false
                         AutoFocus=true
                         TextUpdateSuppression=false
                         OnAdornmentClick=@(async ()=> await SearchAggregateEventsAsync())
                         OnKeyUp=@(async (args)=> await OnKeyPressAsync(args))></MudAutocomplete>
    </MudItem>
</MudGrid>

<MudTable OnRowClick="RowClickEvent" T="RawEventDto" ServerData="@(new Func<TableState, Task<TableData<RawEventDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <HeaderContent>
        <MudTd>Timestamp</MudTd>
        <MudTd>Rev</MudTd>
        <MudTd>Pos</MudTd>
        <MudTd>Events</MudTd>
        <MudTd></MudTd>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Timestamp">@context.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</MudTd>
        <MudTd DataLabel="Rev">@context.EventRevision</MudTd>
        <MudTd DataLabel="Pos">@context.EventPosition</MudTd>
        <MudTd DataLabel="Events">
            @if (@context.IsEntityEvent)
            {
                <MudListItem style="color:orange;" Text="@context.EventName" Icon="@Icons.Material.Filled.Event" />
            }
            else if (@context.IsPublicEvent)
            {
                <MudListItem style="color:royalblue;" Text="@context.EventName" Icon="@Icons.Material.Filled.Public" />
            }
            else
            {
                <MudListItem style="color:forestgreen;" Text="@context.EventName" Icon="@Icons.Material.Filled.Event" />
            }
        </MudTd>
        <MudTd>
            <MudListItem><RepublishEventNew AggregateId="@AggregateId" Event="@context"></RepublishEventNew></MudListItem>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" HorizontalAlignment="HorizontalAlignment.Left">
        </MudTablePager>
    </PagerContent>
</MudTable>

    <MudPopover AnchorOrigin = "Origin.CenterLeft" Open="@_isOpen" Class="px-5 pt-5">
        <MudPaper Outlined=true Style="max-height: 80vh;overflow: auto;">
            <MudText Typo="Typo.caption">@SelectedEvent.Timestamp.ToString("MMM d'th' yyyy hh:mm:ss.fff")</MudText>
            <MudText Typo="Typo.h6">@SelectedEvent.EventName - @SelectedEvent.Id</MudText>
            <div class="json-box">
                <pre Style="@($"color:{Colors.LightGreen.Accent3};")">@_jsonData</pre>
            </div>
        </MudPaper>
        <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
    </MudPopover>

@code {
    public RawEventTableManager RawEventTableManager = new RawEventTableManager();

    string AggregateId { get; set; }
    string theValue { get; set; } = "urn:pruvit:comprofile:account:1000000015";
    RawEventDto SelectedEvent { get; set; }
    IEnumerable<string> AggregateRootIdSamples { get; set; }
    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();
    private MudTable<RawEventDto> table;
    public bool _isOpen;
    private string _jsonData;
    private int selectedRowNumber = -1;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    private async Task<TableData<RawEventDto>> ServerReload(TableState state)
    {
        return await RawEventTableManager.ServerReload(state, AggregateId, async (int take) => await Cronus.GetAggregateEventsWithPaging(App.Connection, AggregateId, RawEventTableManager.Token, take));
    }

    private async Task SearchAggregateEventsAsync()
    {
        await table.ReloadServerData();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<RawEventDto> tableRowClickEventArgs)
    {
        SelectedEvent = tableRowClickEventArgs.Item;
        _jsonData = await FormatJsonAsync();
        _isOpen = true;
    }


    protected override async Task OnInitializedAsync()
    {
        await GetAggregateRootIdSamplesAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task GetAggregateRootIdSamplesAsync()
    {
        var samples = await Cronus.GetAggregateRootIdSamples(App.Connection);
        AggregateRootIdSamples = samples;
    }

    public async Task OnKeyPressAsync(KeyboardEventArgs args)
    {
        if (args.Code == "Enter" || args.Code == "NumpadEnter")
        {
            await SearchAggregateEventsAsync();
        }
    }

    public async Task<string> FormatJsonAsync()
    {
        var result = await JSRuntime.InvokeAsync<string>("JSON.stringify", SelectedEvent.EventData, null, 4);

        return result;
    }

    private async Task<IEnumerable<string>> FilterSampleAsync(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return new string[0];
        return AggregateRootIdSamples.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string SelectedRowClassFunc(RawEventDto element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (table.SelectedItem != null && table.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
