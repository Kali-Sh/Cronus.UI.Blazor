@inject AppState App
@inject ILogger<ConnectionSelector> Log
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject CronusClient Cronus

<div class="btn-group connection">
    <button type="button" class="btn btn-primary w-75">@connectionName</button>
    <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="sr-only">Toggle Dropdown</span>
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var connection in connections)
        {
            <span class="dropdown-item cursor-pointer" @onclick="@(async ()=> await OnConnectionClick(connection))">@connection.Name</span>
        }
    </div>
</div>

<div class="btn-group connection">
    <button type="button" class="btn btn-primary w-75">@tenantName</button>
    <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="sr-only">Toggle Dropdown</span>
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @foreach (var oAuth in oAuths)
        {
            <span class="dropdown-item cursor-pointer" @onclick="@(async ()=> await OnAuthSelected(oAuth))">@oAuth.Tenant</span>
        }
    </div>
</div>

@code {

    string connectionName => App.Connection?.Name ?? "Select Connection...";
    string tenantName => App.oAuth?.Tenant ?? "Select Tenant...";

    List<Connection> connections = new List<Connection>();
    List<oAuth> oAuths = new List<oAuth>();

    protected override async Task OnInitializedAsync()
    {

        connections = await LocalStorage.GetItemAsync<List<Connection>>(LSKey.Connections);
        if (connections is null)
        {
            connections = new List<Connection>();
        }
    }

    protected async Task OnConnectionClick(Connection connection)
    {
        App.Connect(connection);

        List<string> configuredTenantsInTheService = await Cronus.GetTenantsAsync(connection);
        List<oAuth> intersection = connection.oAuths.Where(x => configuredTenantsInTheService.Contains(x.Tenant)).ToList();

        oAuths = intersection;
        StateHasChanged();
    }

    protected async Task OnAuthSelected(oAuth oAuth)
    {
        App.SelectTenant(oAuth);

        StateHasChanged();
    }
}
