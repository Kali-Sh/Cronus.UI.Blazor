@inject AppState App
@inject CronusClient Cronus
@inject IJSRuntime JSRuntime
@inject ILogger<RepublishEvent> Log

<MatButton OnClick="OpenDialog" Raised="true">REPUBLISH</MatButton>

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>
        @if (Event.IsPublicEvent)
        {
            <span>Public Event</span>
        }
        else
        {
            <span>Select Handlers</span>
        }
    </MatDialogTitle>
    <MatDialogContent>
        @if (Event.IsPublicEvent)
        {
            <p>You are about to republish a public event. It will be re-delivered to all connected services/BCs interested in that event!</p>
        }
        else
        {
            <p>You are about to republish an event. Please select which handlers may handle the event:</p>
            @foreach (var element in selectElements)
            {
                <MatCheckbox Value="@element.Selected"
                             ValueChanged="@((bool value) => OnValueChanged(element, value))"
                             ValueExpression="@(() => element.Selected)"
                             Label="@element.DisplayName">
                </MatCheckbox>
                <br />
            }
        }

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@(async () => { await RepublishEventAsync(); dialogIsOpen = false; })">REPUBLISH</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    private bool dialogIsOpen = false;

    private readonly List<SelectableElement> selectElements = new List<SelectableElement>();

    [Parameter]
    public EventDto Event { get; set; }

    [Parameter]
    public AggregateCommitDto AggregateCommit { get; set; }

    async Task RepublishEventAsync()
    {
        var handlers = string.Join(',', selectElements.Where(x => x.Selected).Select(x => x.Id));

        Log.LogInformation($"Republishing:{Environment.NewLine}\tID-Revision-Position: {Event.Id} - {AggregateCommit.AggregateRootRevision} - {Event.EventPosition}{Environment.NewLine}\tHandlers: {handlers}");
        if (AggregateCommit.AggregateRootRevision > 0 && Event.EventPosition >= 0)
            await Cronus.RepublishEventAsync(App.Connection, Event.Id, AggregateCommit.AggregateRootRevision, Event.EventPosition, selectElements.Where(x => x.Selected).Select(x => x.Id).ToArray(), Event.IsPublicEvent);
    }

    public async Task<string> FormatJsonAsync(object data)
    {
        return await JSRuntime.InvokeAsync<string>("JSON.stringify", data, null, 4);
    }

    Task OnValueChanged(SelectableElement element, bool s)
    {
        element.Selected = s;

        return Task.CompletedTask;
    }

    async Task OpenDialog()
    {
        selectElements.Clear();

        DomainDto domain = await Cronus.GetDomainAsync(@App.Connection);

        List<IMessageHandlerDto> handlerCandidates = domain.FindHandlers(new DomainEventDto() { Id = Event.Id }).ToList();
        foreach (var handler in handlerCandidates)
        {
            selectElements.Add(new SelectableElement(false, handler.Id, handler.Name, handler.Type));
        }

        dialogIsOpen = true;
    }

    class SelectableElement
    {
        public bool Selected { get; set; }

        public string Id { get; }

        public string Name { get; set; }

        public string Type { get; set; }

        public string DisplayName => $"{Name} | {Type}";

        public SelectableElement(bool selected, string id, string name, string type)
        {
            Selected = selected;
            Id = id;
            Name = name;
            Type = type;
        }
    }
}
