@if (LiveVersion is null == false)
{
    <MudChip Size="Size.Small" Color="Color.Success">@GetDisplayName(LiveVersion)</MudChip>
}

@if (Version.Status == ProjectionStatus.Live && LiveVersion.Revision != Version.Revision)
{
    <MudChip Size="Size.Small" Color="Color.Success">@GetDisplayName(Version)</MudChip>
}
else if (Version.Status == ProjectionStatus.Building || Version.Status == ProjectionStatus.Rebuilding || Version.Status == ProjectionStatus.Replaying)
{
    <MudChip Size="Size.Small" Color="Color.Primary">@GetDisplayName(Version)</MudChip>
}
else if (Version.Status == ProjectionStatus.NotPresent)
{
    <MudChip Size="Size.Small">@GetDisplayName(Version)</MudChip>
}
else if (Version.Status == ProjectionStatus.Timedout)
{
    <MudChip Size="Size.Small" Variant="Variant.Text" Color="Color.Error">@GetDisplayName(Version)</MudChip>

}
else if (Version.Status == ProjectionStatus.Canceled)
{
    <MudChip Size="Size.Small" Variant="Variant.Outlined">@GetDisplayName(Version)</MudChip>
}

@code {

    // Put all versions and display only the ones that are rebuilding/building/replaying

    [Inject]
    public ILogger<ProjectionVersionBadge> logger { get; set; }

    [Inject]
    public CronusClient Cronus { get; set; }

    [Inject]
    public AppState App { get; set; }

    [Parameter]
    public Projection Projection { get; set; }

    [Parameter]
    public ProjectionVersion Version { get; set; }

    [Parameter]
    public ProjectionVersion LiveVersion { get; set; }

    [Parameter]
    public List<ProjectionVersion> AllVersions { get; set; }

    [Parameter]
    public ProjectionVersion SelectedVersion { get; set; }

    public static int RerenderedCount { get; set; }

    string GetDisplayName(ProjectionVersion version)
    {
        return version.ToString();
    }

    void SelectVersion(ProjectionVersion selectedVersion)
    {
        SelectedVersion = selectedVersion;
        App.SelectVersion(SelectedVersion);
    }

    public Task CancelAsync(Projection projection, ProjectionVersion version)
    {
        return Cronus.CancelSpecificProjectionAsync(App.Connection, Projection, version);
    }
}
