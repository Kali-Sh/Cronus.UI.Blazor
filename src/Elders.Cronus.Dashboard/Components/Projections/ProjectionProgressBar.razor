@inject AppState App
@inject CronusClient Cronus
@inject ILogger<Projection> _logger

<div>
    <div style="font-size:xx-small">@progressString</div>
    <MudProgressLinear Color="@Color" Rounded="true" Size="Size.Large" Value="@progress" />
    <div style="text-align:right">@TimeSpan.FromSeconds(@timeLeft).ToString()</div>
</div>

@code {
    [Parameter]
    public Projection Projection { get; set; }

    [Parameter]
    public Color Color { get; set; }

    private double progress = 0;
    private string progressString = "0 %";
    private long timeLeft = 0;

    protected override Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;

        long processBase = 0;
        long processPace = 0; // Because the server sends every second we could calculate how many records are received per second. It will be cool if the server sends the refresh interval
        int receivedNotifications = 0;
        long lastCalculatedTimeLeft = 0;
        int sanityCounter = 0;

        App.HubConnection.On<string, long, long>("RebuildProgress", (projectionTypeId, processed, total) =>
            {
                if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                    return;

                unchecked
                {
                    double percentage = (processed * 100) / total;
                    progressString = $"{percentage} % ( {processed} / {total} )";
                    progress = processed * 100 / total;
                }

                receivedNotifications++;
                if (processBase > 0)
                {
                    processPace = (processed - processBase) / receivedNotifications;
                    lastCalculatedTimeLeft = (total - processed) / processPace;
                    if (lastCalculatedTimeLeft < timeLeft || timeLeft == 0)
                    {
                        timeLeft = lastCalculatedTimeLeft;
                        sanityCounter = 0;
                    }
                    else
                    {
                        sanityCounter++;
                        if (sanityCounter > 10)
                        {
                            timeLeft++;
                        }
                        else
                        {
                            timeLeft--;
                        }
                        
                    }
                }
                else
                {
                    receivedNotifications--;
                    processBase = processed;
                }

                StateHasChanged();
            });

        App.HubConnection.On<string>("RebuildStarted", (projectionTypeId) =>
        {
            if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                return;

            progressString = $"0 % ( {0} / -- )";
            progress = 0;

            StateHasChanged();

        });

        App.HubConnection.On<string>("RebuildFinished", (projectionTypeId) =>
        {
            if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                return;

            progress = 100;

            StateHasChanged();

        });

        return Task.CompletedTask;
    }
}
