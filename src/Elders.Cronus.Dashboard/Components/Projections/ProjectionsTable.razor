@inject AppState App
@inject CronusClient Cronus
@inject ILogger<ProjectionsTable> Logger;

<MudTable Items="@projections" FixedHeader="true" Dense="true">
    <ColGroup>
        <col />
        <col />
        <col />
        <col style="width:200px;" />
        <col style="width:300px;" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Version</MudTh>
        <MudTh>Action Options</MudTh>
        <MudTh>Actions</MudTh>
        <MudTh>Other</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.ProjectionName</MudTd>
        <MudTd DataLabel="Version">
                <ProjectionVersionBadge Projection="@context" Version="@context.LatestVersion" LiveVersion="@context.LiveVersion" AllVersions="@context.Versions"></ProjectionVersionBadge>
        </MudTd>
        <MudTd DataLabel="Action Options">
            <MudNumericField @bind-Value="@context.ReplayOptions.MaxDegreeOfParallelism" Label="MaxDegreeOfParallelism" Variant="Variant.Outlined" Step="1" Clearable=true Max="100" />
            <MudDatePicker Label="After" @bind-Date="@context.ReplayOptions.After" EnableTime="true"></MudDatePicker>
            <MudDatePicker Label="Before" @bind-Date="@context.ReplayOptions.Before" EnableTime="true"></MudDatePicker>
        </MudTd>
        <MudTd DataLabel="Actions">

            @if (@context.LatestVersion.Status != ProjectionStatus.Fixing && @context.LatestVersion.Status != ProjectionStatus.New && @context.LiveVersion?.Hash != "ver")//api should return if the projection is repl
            {
                <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" ToolTip="Creates a new projection version. You should use this when your projection contains events you do not want." OnClick="@(async () => await NewProjectionVersionAsync(@context))"></MudIconButton>
            }

            @if (@context.IsReplayable && @context.LatestVersion.Status != ProjectionStatus.Fixing)//API does not return if the projection is replayable
            {
                <MudIconButton Icon="@Icons.Material.Filled.Loop" Color="Color.Success" ToolTip="Fixing the projection version. You should use this when there are missing events." OnClick="@(async () => await RebuildAsync(@context))" Class="mr-2"></MudIconButton>
            }

            <span class="d-inline"><MudIconButton Icon="@Icons.Material.Filled.Pause" Color="Color.Success" ToolTip="Pause" OnClick="@(async () => await PauseAsync(@context,@context.LatestVersion))"></MudIconButton></span>

            @if (@context.LatestVersion.Status == ProjectionStatus.NotPresent)
            {
                <a href="/projections/@context.ProjectionContractId" style="pointer-events: none"><MudIcon Icon="@Icons.Material.Filled.Search"></MudIcon></a>
            }
            else
            {
                <a href="/projections/@context.ProjectionContractId"><MudIcon Icon="@Icons.Material.Filled.Search"></MudIcon></a>
            }
        </MudTd>
        <MudTd DataLabel="Other">
            <ProjectionProgressBar Projection="@context"></ProjectionProgressBar>
        </MudTd>
        <MudTd DataLabel="Id">
            <MudText style="font-size:small" Font-Size="Size.Small" Typo="Typo.body2" Color="Color.Primary"><cite>@context.ProjectionContractId</cite></MudText>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public ProjectionVersion SelectedVersion { get; set; }

    List<Projection> projections = new List<Projection>();

    protected override async Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;
        App.OnConnectionChanged += GetProjectionsListAsync;
        App.OnVersionSelected += SelectVersion;

        await GetProjectionsListAsync(App.Connection);

        App.HubConnection.On<string>("RebuildStarted", async (projectionTypeId) =>
        {
            await GetProjectionsListAsync(App.Connection);
            StateHasChanged();
        });

        App.HubConnection.On<string>("RebuildFinished", async (projectionTypeId) =>
        {
            await GetProjectionsListAsync(App.Connection);
            StateHasChanged();
        });
    }

    protected async Task GetProjectionsListAsync(Connection connection)
    {
        try
        {
            projections = new List<Projection>();

            if (App.Connection is null == false || connection is null == false)
            {
                Response<ProjectionCollection> result = await Cronus.GetProjectionsAsync(connection ?? App.Connection);
                projections = result.Result.Projections;
            }
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Task SelectVersion(ProjectionVersion version)
    {
        SelectedVersion = version;
        Logger.LogInformation(SelectedVersion.ToString());
        return Task.CompletedTask;
    }

    public Task RebuildAsync(Projection projection)
    {
        return Cronus.RebuildProjectionAsync(App.Connection, projection);
    }

    public Task NewProjectionVersionAsync(Projection projection)
    {
        return Cronus.NewProjectionVersionAsync(App.Connection, projection);
    }

    public Task PauseAsync(Projection projection, ProjectionVersion version)
    {
        return Cronus.PauseSpecificProjectionAsync(App.Connection, projection, version);
    }

    public Task FinalizeAsync(Projection projection, ProjectionVersion version)
    {
        StateHasChanged();
        return Cronus.FinalizeProjectionAsync(App.Connection, projection, version);
    }
}
