@inject AppState App
@inject CronusClient Cronus
@inject ILogger<ProjectionsList> Logger;

<div hidden="@(projections?.Count == 0)" class="top-row px-4">

    <div class="px-4">
        <MudChip Size="Size.Small" Color="Color.Success">Live</MudChip>
        <MudChip Size="Size.Small" Color="Color.Primary">Replaying</MudChip>
        <MudChip Size="Size.Small" Variant="Variant.Text" Color="Color.Error">Timedout</MudChip>
        <MudChip Size="Size.Small">NotPresent</MudChip>
        <MudChip Size="Size.Small" Variant="Variant.Outlined">Canceled</MudChip>
    </div>
</div>

<div class="row">
    @foreach (var projection in projections)
    {
        <div class="col-sm-4 mt-4">
            <ProjectionCard Projection="@projection" SelectedVersion="@SelectedVersion"></ProjectionCard>
        </div>
    }
</div>

@code {
    [Parameter]
    public ProjectionVersion SelectedVersion { get; set; }

    List<Projection> projections = new List<Projection>();

    protected override async Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;
        App.OnConnectionChanged += GetProjectionsListAsync;
        App.OnVersionSelected += SelectVersion;

        await GetProjectionsListAsync(App.Connection);
    }

    protected async Task GetProjectionsListAsync(Connection connection)
    {
        try
        {
            projections = new List<Projection>();

            if (App.Connection is null == false || connection is null == false)
            {
                var result = await Cronus.GetProjectionsAsync(connection ?? App.Connection);
                projections = result.Result.Projections;
            }
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Task SelectVersion(ProjectionVersion version)
    {
        SelectedVersion = version;
        Logger.LogInformation(SelectedVersion.ToString());
        return Task.CompletedTask;
    }
}
