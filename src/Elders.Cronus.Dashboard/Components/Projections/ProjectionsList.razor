@inject AppState App
@inject CronusClient Cronus

<GreyOutZone IsGreyedOut=isLoading>
    <div hidden="@(projections?.Count == 0)" class="top-row px-4">
        <div class="px-4">
            <input class="input-text" value="Filter" />
        </div>
        <div class="px-4">
            <span class="badge badge-success">Live</span>
            <span class="badge badge-primary">Building</span>
            <span class="badge badge-secondary">NotPresent</span>
            <span class="badge badge-danger">Timedout</span>
            <span class="badge badge-dark">Canceled</span>
        </div>
    </div>

    <div class="row">
        @foreach (var projection in projections)
        {
            <div class="col-sm-4 mt-4">
                <ProjectionCard Projection="@projection"></ProjectionCard>
            </div>
        }
    </div>
</GreyOutZone>

@code {
    bool isLoading = false;
    List<Projection> projections = new List<Projection>();

    protected override Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;
        App.OnConnectionChanged += GetProjectionsList;

        return GetProjectionsList(App.Connection);
    }

    protected async Task GetProjectionsList(Connection connection)
    {
        if (connection is null == false)
        {
            isLoading = true;
            var result = await Cronus.GetProjectionsAsync(@App.Connection);
            projections = result.Result.Projections;
            isLoading = false;

            StateHasChanged();
        }
    }
}
