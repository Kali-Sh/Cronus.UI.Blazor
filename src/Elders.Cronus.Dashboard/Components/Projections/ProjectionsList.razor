@implements IDisposable
@inject AppState App
@inject CronusClient Cronus

<div hidden="@(projections?.Count == 0)" class="top-row px-4">
    <div class="px-4">
        <input class="input-text" value="Filter" />
    </div>
    <div class="px-4">
        <span class="badge badge-success">Live</span>
        <span class="badge badge-primary">Building</span>
        <span class="badge badge-secondary">NotPresent</span>
        <span class="badge badge-danger">Timedout</span>
        <span class="badge badge-dark">Canceled</span>
    </div>
</div>

<div class="row">
    @foreach (var projection in projections)
    {
        <div class="col-sm-4 mt-4">
            <ProjectionCard Projection="@projection"></ProjectionCard>
        </div>
    }
</div>

@code {
    private System.Threading.Timer timer;

    List<Projection> projections = new List<Projection>();

    protected override async Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;
        App.OnConnectionChanged += GetProjectionsListAsync;

        await GetProjectionsListAsync(App.Connection);

        timer = new System.Threading.Timer(_ => InvokeAsync(() => GetProjectionsListAsync(App.Connection)), null, 0, 50000);
    }

    protected async Task GetProjectionsListAsync(Connection connection)
    {
        try
        {
            projections = new List<Projection>();

            if (App.Connection is null == false || connection is null == false)
            {
                var result = await Cronus.GetProjectionsAsync(connection ?? App.Connection);
                projections = result.Result.Projections;
            }
        }
        finally
        {
            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        timer?.Dispose();
        timer = null;
    }
}
