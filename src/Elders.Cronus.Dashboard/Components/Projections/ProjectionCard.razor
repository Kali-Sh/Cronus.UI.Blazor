@inject AppState App
@inject CronusClient Cronus
@implements IAsyncDisposable
@inject ILogger<Projection> Log

@if (Projection is null == false)
{
    <div class="card">
        <div class="card-header">
            @if (Projection.LatestVersion.Status == ProjectionStatus.Replaying)
            {
                <div class="text-left col-lg-13" style="top:-35px">
                    <br>
                    <div style="font-size:xx-small">@progressString</div>
                    @if (progress == 0)
                    {
                        <MatProgressBar Progress="0" Buffer="0.01"></MatProgressBar>
                    }
                    else
                    {
                        <MatProgressBar Progress="@progress"></MatProgressBar>
                    }

                </div>
            }
            <div class="row">
                <div class="text-left col-lg-7">
                    <span>@Projection.ProjectionName</span>
                    <div>
                        <span style="font-size:small"><cite>@Projection.ProjectionContractId</cite></span>
                    </div>

                    <div class="d-inline">
                        <ProjectionVersionBadge Projection="@Projection" Version="@Projection.LatestVersion" LiveVersion="@Projection.LiveVersion" AllVersions="@Projection.Versions"></ProjectionVersionBadge>
                    </div>
                </div>

                <div class="text-right col-lg-5">
                    @if (Projection.LatestVersion.Status != ProjectionStatus.Building && Projection.LatestVersion.Status != ProjectionStatus.Replaying && Projection.LiveVersion.Hash != "ver")//api should return if the projection is repl
                    {
                        <IconButton Icon="media-play" ToolTip="Replays the projection and creates a new version. You should use this when your projection contains events you do not want." Click="@(async () => await ReplayAsync(Projection))"></IconButton>
                    }
                    @if(Projection.LatestVersion.Status == ProjectionStatus.Building || Projection.LatestVersion.Status == ProjectionStatus.Replaying)
                    {
                    <span class="d-inline"><IconButton Icon="media-stop" ToolTip="Cancel" Click="@(async () => await CancelAsync(Projection,Projection.LatestVersion))"></IconButton></span>
                    }

                    @if (Projection.IsReplayable && Projection.LatestVersion.Status != ProjectionStatus.Building)//API does not return if the projection is replayable
                    {
                        <IconButton Icon="loop-square" ToolTip="Rebuilds the projection version. You should use this when there are missing events." Click="@(async () => await RebuildAsync(Projection))"></IconButton>
                    }

                    <a href="/projections/@Projection.ProjectionContractId"><Icon Identifier="magnifying-glass"></Icon></a>

                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Projection Projection { get; set; }

    [Parameter]
    public ProjectionVersion SelectedVersion { get; set; }

    HubConnection hubConnection;

    double progress = 0;
    string progressString = "0 %";

    protected async override Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;

        Log.LogInformation("Initializing signalR...");

        hubConnection = new HubConnectionBuilder()
        .WithUrl(App.Connection.CronusEndpoint + "/hub/projections")
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, long, long>("RebuildProgress", (projectionTypeId, processed, total) =>
        {
            Log.LogInformation("RebuildProgress: " + projectionTypeId + " " + processed + "/" + total);
            if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                return;

            unchecked
            {
                double percentage = (processed * 100) / total;
                progressString = $"{percentage} % ( {processed} / {total} )";
                progress = (percentage / 100);
            }

            StateHasChanged();
        });

        hubConnection.On<string>("RebuildStarted", (projectionTypeId) =>
        {
            Log.LogInformation("RebuildStarted: " + projectionTypeId);

            if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                return;

            progressString = $"0 % ( {0} / -- )";
            progress = 0;

            Projection.LatestVersion.Status = ProjectionStatus.Building;

            StateHasChanged();
        });

        hubConnection.On<string>("RebuildFinished", (projectionTypeId) =>
        {
            Log.LogInformation("RebuildFinished: " + projectionTypeId);

            if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                return;

            progress = 1;

            Projection.LatestVersion.Status = ProjectionStatus.Live;

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public Task RebuildAsync(Projection projection)
    {
        return Cronus.RebuildProjectionAsync(App.Connection, Projection);
    }

    public Task ReplayAsync(Projection projection)
    {
        return Cronus.ReplayProjectionAsync(App.Connection, Projection);
    }

    public Task CancelAsync(Projection projection, ProjectionVersion version)
    {
        return Cronus.CancelSpecificProjectionAsync(App.Connection, Projection, version);

    }

    public async ValueTask DisposeAsync()
    {
        Log.LogInformation("Disposing signalR...");
        await hubConnection.DisposeAsync();

    }
}
