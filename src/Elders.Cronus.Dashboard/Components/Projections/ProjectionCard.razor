@inject AppState App
@inject CronusClient Cronus
@inject ILogger<Projection> Log

@if (Projection is null == false)
{
    <div class="card" style="background-color:#27272fff">
        <div class="card-header">
            <div class="text-left col-lg-13" style="top:-35px">
                <br>
                @if (Projection.LatestVersion.Status == ProjectionStatus.Replaying)
                {
                    <ProjectionProgressBar Projection="@Projection" Color="Color.Warning"></ProjectionProgressBar>
                }
                else if (Projection.RebuildingVersion?.Status == ProjectionStatus.Building || Projection.RebuildingVersion?.Status == ProjectionStatus.Rebuilding)
                {
                    <ProjectionProgressBar Projection="@Projection" Color="Color.Primary"></ProjectionProgressBar>
                }
            </div>

            <div class="row">
                <div class="text-left col-lg-7">
                    <span>@Projection.ProjectionName</span>
                    <div>
                        <MudText style="font-size:small" Font-Size="Size.Small" Typo="Typo.body2" Color="Color.Primary"><cite>@Projection.ProjectionContractId</cite></MudText>
                    </div>

                    <div class="d-inline">
                        <ProjectionVersionBadge Projection="@Projection" Version="@Projection.LatestVersion" LiveVersion="@Projection.LiveVersion" AllVersions="@Projection.Versions"></ProjectionVersionBadge>
                    </div>
                </div>

                <div class="text-right col-lg-5">
                    @if (Projection.LatestVersion.Status != ProjectionStatus.Building && Projection.LatestVersion.Status != ProjectionStatus.Replaying && Projection.LiveVersion?.Hash != "ver")//api should return if the projection is repl
                    {
                        <MudIconButton Icon="@Icons.Filled.PlayArrow" Color="Color.Success" ToolTip="Replays the projection and creates a new version. You should use this when your projection contains events you do not want." OnClick="@(async () => await ReplayAsync(Projection))"></MudIconButton>
                    }

                    @if (Projection.IsReplayable && Projection.LatestVersion.Status != ProjectionStatus.Building)//API does not return if the projection is replayable
                    {
                        <MudIconButton Icon="@Icons.Filled.Loop" Color="Color.Success" ToolTip="Rebuilds the projection version. You should use this when there are missing events." OnClick="@(async () => await RebuildAsync(Projection))" Class="mr-2"></MudIconButton>
                    }

                    @if (Projection.LatestVersion.Status == ProjectionStatus.Building || Projection.LatestVersion.Status == ProjectionStatus.Rebuilding || Projection.LatestVersion.Status == ProjectionStatus.Replaying)
                    {
                        <span class="d-inline"><MudIconButton Icon="@Icons.Filled.Stop" Color="Color.Success" ToolTip="Cancel" OnClick="@(async () => await CancelAsync(Projection,Projection.LatestVersion))"></MudIconButton></span>
                    }

                    @if(Projection.LatestVersion.Status == ProjectionStatus.NotPresent)
                    {
                        <a href="/projections/@Projection.ProjectionContractId" style="pointer-events: none"><MudIcon Icon="@Icons.Filled.Search"></MudIcon></a>
                    }
                    else
                    {
                         <a href="/projections/@Projection.ProjectionContractId"><MudIcon Icon="@Icons.Filled.Search"></MudIcon></a>
                    }      

                      
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Projection Projection { get; set; }

    [Parameter]
    public ProjectionVersion SelectedVersion { get; set; }

    public string LatestVersionStatus { get; set; }

    public Task RebuildAsync(Projection projection)
    {
        LatestVersionStatus = ProjectionStatus.Rebuilding;
        return Cronus.RebuildProjectionAsync(App.Connection, Projection);
    }

    public Task ReplayAsync(Projection projection)
    {
        LatestVersionStatus = ProjectionStatus.Replaying;
        return Cronus.ReplayProjectionAsync(App.Connection, Projection);
    }

    public Task CancelAsync(Projection projection, ProjectionVersion version)
    {
        LatestVersionStatus = ProjectionStatus.Canceled;
        return Cronus.CancelSpecificProjectionAsync(App.Connection, Projection, version);
    }

    public Task FinalizeAsync(Projection projection, ProjectionVersion version)
    {
        StateHasChanged();
        return Cronus.FinalizeProjectionAsync(App.Connection, Projection, version);
    }

    protected override Task OnInitializedAsync()
    {
        App.OnChange += StateHasChanged;

        LatestVersionStatus = Projection.LatestVersion.Status;

        App.HubConnection.On<string>("RebuildStarted", (projectionTypeId) =>
       {
           if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
               return;

           if (LatestVersionStatus == ProjectionStatus.Replaying)
               ShowReplayStatus(projectionTypeId);
           else if (LatestVersionStatus == ProjectionStatus.Rebuilding)
               ShowRebuildStatus(projectionTypeId);

           StateHasChanged();
       });

        App.HubConnection.On<string>("RebuildFinished", (projectionTypeId) =>
        {
            if (Projection.ProjectionContractId.Equals(projectionTypeId, StringComparison.OrdinalIgnoreCase) == false)
                return;

            if(LatestVersionStatus == ProjectionStatus.Canceled)
            {
                Projection.LatestVersion.Status = ProjectionStatus.Canceled;
                Projection.RebuildingVersion.Status = ProjectionStatus.Canceled;
            }
            else
            {
                Projection.LatestVersion.Status = ProjectionStatus.Live;
                Projection.RebuildingVersion.Status = ProjectionStatus.Live;
            }

            Log.LogInformation("RebuildFinished: " + projectionTypeId);
            StateHasChanged();
        });

        return Task.CompletedTask;
    }

    private void ShowReplayStatus(string projectionTypeId)
    {
        Log.LogInformation($"ReplayStarted: {projectionTypeId}");

        ProjectionVersion newVersion = new ProjectionVersion(Projection.LiveVersion.Hash, Projection.LiveVersion.Revision + 1, ProjectionStatus.Replaying);
        if (Projection.Versions.Contains(newVersion) == false)
        {
            Projection.Versions.Add(newVersion);
        }
    }

    private void ShowRebuildStatus(string projectionTypeId)
    {
        Log.LogInformation($"RebuildStarted: {projectionTypeId}");

        ProjectionVersion newVersion = new ProjectionVersion(Projection.LiveVersion.Hash, Projection.LiveVersion.Revision, ProjectionStatus.Rebuilding);
        if (Projection.Versions.Contains(newVersion) == false)
        {
            Projection.Versions.Add(newVersion);
        }
    }
}
